// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaparApi.Data;

#nullable disable

namespace Tapar.Data.Migrations
{
    [DbContext(typeof(TaparDbContext))]
    partial class TaparDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Tapar.Data.Entities.Cat3", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("cat2Id")
                        .HasColumnType("int");

                    b.Property<string>("gdesc")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("cat2Id");

                    b.ToTable("Cat3s");
                });

            modelBuilder.Entity("Tapar.Data.Entities.Filters_Cat2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("cat2Id")
                        .HasColumnType("int");

                    b.Property<int?>("parentId")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("cat2Id");

                    b.ToTable("Filters_Cat2s");
                });

            modelBuilder.Entity("Tapar.Data.Entities.Place", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("address1")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("bussiness_pic1")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("bussiness_pic2")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("bussiness_pic3")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("cat3Id")
                        .HasColumnType("int");

                    b.Property<string>("fax")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("gvalue")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("latitude")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("like_count")
                        .HasColumnType("int");

                    b.Property<string>("longitude")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("manager")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("mob1")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("mob2")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("personal_pic")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("phone1")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("phone2")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("phone3")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("service_description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("special_message")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("tablo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("tags")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long>("userId")
                        .HasColumnType("bigint");

                    b.Property<int?>("view_count")
                        .HasColumnType("int");

                    b.Property<string>("visitCart_back")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("visitCart_front")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("work_time_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("cat3Id");

                    b.HasIndex("userId");

                    b.HasIndex("work_time_id");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("Tapar.Data.Entities.Place_Filter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("filters_Cat2Id")
                        .HasColumnType("int");

                    b.Property<long>("placeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("filters_Cat2Id");

                    b.HasIndex("placeId");

                    b.ToTable("Place_Filters");
                });

            modelBuilder.Entity("Tapar.Data.Entities.SubPlace", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("internalPhone")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("personalPic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("placeId")
                        .HasColumnType("bigint");

                    b.Property<string>("semat")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("placeId");

                    b.ToTable("SubPlaces");
                });

            modelBuilder.Entity("Tapar.Data.Entities.WorkTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("WorkTimes");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.Cat1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("gdesc")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Cat1s");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.Cat2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("cat1Id")
                        .HasColumnType("int");

                    b.Property<string>("gdesc")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("cat1Id");

                    b.ToTable("Cat2s");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("approv_date")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long>("approv_date_userId")
                        .HasColumnType("bigint");

                    b.Property<string>("create_date")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long>("placeId")
                        .HasColumnType("bigint");

                    b.Property<string>("text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("userId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("placeId");

                    b.HasIndex("userId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.FieldType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("FieldTypes");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.LikeCount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("likeDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("placeId")
                        .HasColumnType("bigint");

                    b.Property<long>("userId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("placeId");

                    b.HasIndex("userId");

                    b.ToTable("LikeCounts");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("latitude")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("longitude")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("parentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.RefreshTokens", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("expirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("refreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("superAdminId")
                        .HasColumnType("int");

                    b.Property<long?>("userId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("superAdminId");

                    b.HasIndex("userId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.SpecialTypeField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Cat3Id")
                        .HasColumnType("int");

                    b.Property<int?>("cat2Id")
                        .HasColumnType("int");

                    b.Property<string>("enTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("fieldTypeId")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Cat3Id");

                    b.HasIndex("cat2Id");

                    b.HasIndex("fieldTypeId");

                    b.ToTable("SpecialTypeFields");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.SuperAdmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("adminType")
                        .HasColumnType("int");

                    b.Property<string>("fullName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("SuperAdmins");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("firstName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("lastName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("mobile")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("nickName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("password")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("userName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.ViewCount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("clientDetail")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long>("placeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("userId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("viewDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("placeId");

                    b.HasIndex("userId");

                    b.ToTable("ViewCounts");
                });

            modelBuilder.Entity("Tapar.Data.Entities.Cat3", b =>
                {
                    b.HasOne("TaparApi.Data.Entities.Cat2", "cat2")
                        .WithMany("cat3s")
                        .HasForeignKey("cat2Id");

                    b.Navigation("cat2");
                });

            modelBuilder.Entity("Tapar.Data.Entities.Filters_Cat2", b =>
                {
                    b.HasOne("TaparApi.Data.Entities.Cat2", "cat2")
                        .WithMany("filters_Cat2s")
                        .HasForeignKey("cat2Id");

                    b.Navigation("cat2");
                });

            modelBuilder.Entity("Tapar.Data.Entities.Place", b =>
                {
                    b.HasOne("TaparApi.Data.Entities.Location", null)
                        .WithMany("places")
                        .HasForeignKey("LocationId");

                    b.HasOne("Tapar.Data.Entities.Cat3", "cat3")
                        .WithMany("places")
                        .HasForeignKey("cat3Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TaparApi.Data.Entities.User", "user")
                        .WithMany("places")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tapar.Data.Entities.WorkTime", "workTime")
                        .WithMany("places")
                        .HasForeignKey("work_time_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("cat3");

                    b.Navigation("user");

                    b.Navigation("workTime");
                });

            modelBuilder.Entity("Tapar.Data.Entities.Place_Filter", b =>
                {
                    b.HasOne("Tapar.Data.Entities.Filters_Cat2", "Filters_Cat2")
                        .WithMany("place_Filters")
                        .HasForeignKey("filters_Cat2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tapar.Data.Entities.Place", "place")
                        .WithMany("place_Filters")
                        .HasForeignKey("placeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Filters_Cat2");

                    b.Navigation("place");
                });

            modelBuilder.Entity("Tapar.Data.Entities.SubPlace", b =>
                {
                    b.HasOne("Tapar.Data.Entities.Place", "place")
                        .WithMany("subPlaces")
                        .HasForeignKey("placeId");

                    b.Navigation("place");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.Cat2", b =>
                {
                    b.HasOne("TaparApi.Data.Entities.Cat1", "cat1")
                        .WithMany("cat2s")
                        .HasForeignKey("cat1Id");

                    b.Navigation("cat1");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.Comment", b =>
                {
                    b.HasOne("Tapar.Data.Entities.Place", "place")
                        .WithMany("comments")
                        .HasForeignKey("placeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TaparApi.Data.Entities.User", "user")
                        .WithMany("Comments")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("place");

                    b.Navigation("user");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.LikeCount", b =>
                {
                    b.HasOne("Tapar.Data.Entities.Place", "place")
                        .WithMany("likeCounts")
                        .HasForeignKey("placeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TaparApi.Data.Entities.User", "User")
                        .WithMany("LikeCounts")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("place");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.RefreshTokens", b =>
                {
                    b.HasOne("TaparApi.Data.Entities.SuperAdmin", "superAdmin")
                        .WithMany("refreshTokens")
                        .HasForeignKey("superAdminId");

                    b.HasOne("TaparApi.Data.Entities.User", "user")
                        .WithMany("refreshTokens")
                        .HasForeignKey("userId");

                    b.Navigation("superAdmin");

                    b.Navigation("user");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.SpecialTypeField", b =>
                {
                    b.HasOne("Tapar.Data.Entities.Cat3", null)
                        .WithMany("SpecialTypeFields")
                        .HasForeignKey("Cat3Id");

                    b.HasOne("TaparApi.Data.Entities.Cat2", "cat2")
                        .WithMany("SpecialTypeFields")
                        .HasForeignKey("cat2Id");

                    b.HasOne("TaparApi.Data.Entities.FieldType", "FieldType")
                        .WithMany("SpecialTypeFields")
                        .HasForeignKey("fieldTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FieldType");

                    b.Navigation("cat2");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.ViewCount", b =>
                {
                    b.HasOne("Tapar.Data.Entities.Place", "place")
                        .WithMany("viewCounts")
                        .HasForeignKey("placeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TaparApi.Data.Entities.User", "User")
                        .WithMany("ViewCounts")
                        .HasForeignKey("userId");

                    b.Navigation("User");

                    b.Navigation("place");
                });

            modelBuilder.Entity("Tapar.Data.Entities.Cat3", b =>
                {
                    b.Navigation("SpecialTypeFields");

                    b.Navigation("places");
                });

            modelBuilder.Entity("Tapar.Data.Entities.Filters_Cat2", b =>
                {
                    b.Navigation("place_Filters");
                });

            modelBuilder.Entity("Tapar.Data.Entities.Place", b =>
                {
                    b.Navigation("comments");

                    b.Navigation("likeCounts");

                    b.Navigation("place_Filters");

                    b.Navigation("subPlaces");

                    b.Navigation("viewCounts");
                });

            modelBuilder.Entity("Tapar.Data.Entities.WorkTime", b =>
                {
                    b.Navigation("places");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.Cat1", b =>
                {
                    b.Navigation("cat2s");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.Cat2", b =>
                {
                    b.Navigation("SpecialTypeFields");

                    b.Navigation("cat3s");

                    b.Navigation("filters_Cat2s");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.FieldType", b =>
                {
                    b.Navigation("SpecialTypeFields");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.Location", b =>
                {
                    b.Navigation("places");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.SuperAdmin", b =>
                {
                    b.Navigation("refreshTokens");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("LikeCounts");

                    b.Navigation("ViewCounts");

                    b.Navigation("places");

                    b.Navigation("refreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
