// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaparApi.Data;

#nullable disable

namespace TaparApi.Migrations
{
    [DbContext(typeof(TaparDbContext))]
    [Migration("20220409061916_next2")]
    partial class next2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TaparApi.Data.Entities.Business", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("approvedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("approvedUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("businessOfficeId")
                        .HasColumnType("bigint");

                    b.Property<long>("businessPersonId")
                        .HasColumnType("bigint");

                    b.Property<long>("businessType2Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("cDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("cUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("deactivatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("deactivatedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("deactivatedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("deletedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("deletedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("lattitude")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("likeCount")
                        .HasColumnType("int");

                    b.Property<string>("longitude")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime?>("modifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("modifiedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("serviceDesc")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("specialMessage")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("tabloPic")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("titel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("viewCount")
                        .HasColumnType("int");

                    b.Property<string>("visitPic")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("workTime")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("workTimeDesc")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("businessOfficeId");

                    b.HasIndex("businessPersonId");

                    b.HasIndex("businessType2Id");

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.BusinessCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("approvedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("deactivatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("deletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("gdesc")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BusinessCategories");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.BusinessOffice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("approvedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("approvedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("area")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("cDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("cUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("deactivatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("deactivatedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("deactivatedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("deletedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("deletedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("fax")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("gKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("instagram")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("latitude")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("locationId")
                        .HasColumnType("int");

                    b.Property<string>("longitude")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("mob1")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("mob2")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime?>("modifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("modifiedUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("parentId")
                        .HasColumnType("bigint");

                    b.Property<string>("phone1")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("phone2")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("phone3")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("postCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("telegram")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("userId")
                        .HasColumnType("bigint");

                    b.Property<string>("viewPic")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("website")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("whatsapp")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("locationId");

                    b.HasIndex("userId");

                    b.ToTable("BusinessOffices");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.BusinessPerson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("approvedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("approvedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("cDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("cUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("deactivatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("deactivatedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("deactivatedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("deletedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("deletedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("gDesc")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("modifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("modifiedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("nationalCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("pic")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("userId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("BusinessPeople");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.BusinessType1", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("approvedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("businessCategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("deactivatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("deletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("gdesc")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("businessCategoryId");

                    b.ToTable("BusinessType1s");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.BusinessType2", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("businessType1Id")
                        .HasColumnType("bigint");

                    b.Property<string>("gdesc")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("businessType1Id");

                    b.ToTable("BusinessType2s");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.BusinessUpdate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("businessId")
                        .HasColumnType("bigint");

                    b.Property<string>("lattitude")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("longitude")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime?>("modifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("modifiedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("serviceDesc")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("specialMessage")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("tabloPic")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("titel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("visitPic")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("workTime")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("workTimeDesc")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("businessId");

                    b.ToTable("BusinessUpdates");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("approveUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("approvedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("businessId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("createDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("userId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("businessId");

                    b.HasIndex("userId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.FieldType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("FieldTypes");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.LikeCount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("businessId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("likeDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("userId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("businessId");

                    b.HasIndex("userId");

                    b.ToTable("LikeCounts");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("latitude")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("locationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("longitude")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("parentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("locationTypeId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.LocationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("LocationTypes");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.OfficeUpdate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("area")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long>("businessOfficeId")
                        .HasColumnType("bigint");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("fax")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("instagram")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("latitude")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("longitude")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("mob1")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("mob2")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime?>("modifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("modifiedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("phone1")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("phone2")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("phone3")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("postCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("telegram")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("viewPic")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("website")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("whatsapp")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("businessOfficeId");

                    b.ToTable("OfficeUpdates");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.SpecialTypeField", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("businessType1Id")
                        .HasColumnType("bigint");

                    b.Property<long>("businessType2Id")
                        .HasColumnType("bigint");

                    b.Property<string>("enTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("fieldTypeId")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("businessType1Id");

                    b.HasIndex("businessType2Id");

                    b.HasIndex("fieldTypeId");

                    b.ToTable("SpecialTypeFields");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.SuperAdmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("adminType")
                        .HasColumnType("int");

                    b.Property<string>("fullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SuperAdmins");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("mobile")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("nationalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("nickName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.ViewCount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("businessId")
                        .HasColumnType("bigint");

                    b.Property<string>("clientDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("userId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("viewDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("businessId");

                    b.HasIndex("userId");

                    b.ToTable("ViewCounts");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.Business", b =>
                {
                    b.HasOne("TaparApi.Data.Entities.BusinessOffice", "BusinessOffice")
                        .WithMany("Businesses")
                        .HasForeignKey("businessOfficeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TaparApi.Data.Entities.BusinessPerson", "BusinessPerson")
                        .WithMany()
                        .HasForeignKey("businessPersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TaparApi.Data.Entities.BusinessType2", "BusinessType2")
                        .WithMany()
                        .HasForeignKey("businessType2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BusinessOffice");

                    b.Navigation("BusinessPerson");

                    b.Navigation("BusinessType2");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.BusinessOffice", b =>
                {
                    b.HasOne("TaparApi.Data.Entities.Location", "Location")
                        .WithMany("BusinessOffices")
                        .HasForeignKey("locationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TaparApi.Data.Entities.User", "User")
                        .WithMany("BusinessOffices")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.BusinessPerson", b =>
                {
                    b.HasOne("TaparApi.Data.Entities.User", "User")
                        .WithMany("BusinessPersons")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.BusinessType1", b =>
                {
                    b.HasOne("TaparApi.Data.Entities.BusinessCategory", "BusinessCategory")
                        .WithMany("BusinessType1s")
                        .HasForeignKey("businessCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BusinessCategory");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.BusinessType2", b =>
                {
                    b.HasOne("TaparApi.Data.Entities.BusinessType1", "BusinessType1")
                        .WithMany("BusinessType2s")
                        .HasForeignKey("businessType1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BusinessType1");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.BusinessUpdate", b =>
                {
                    b.HasOne("TaparApi.Data.Entities.Business", "Business")
                        .WithMany("BusinessUpdates")
                        .HasForeignKey("businessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.Comment", b =>
                {
                    b.HasOne("TaparApi.Data.Entities.Business", "Business")
                        .WithMany("Comments")
                        .HasForeignKey("businessId");

                    b.HasOne("TaparApi.Data.Entities.User", "user")
                        .WithMany("Comments")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("user");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.LikeCount", b =>
                {
                    b.HasOne("TaparApi.Data.Entities.Business", "Business")
                        .WithMany("LikeCounts")
                        .HasForeignKey("businessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TaparApi.Data.Entities.User", "User")
                        .WithMany("LikeCounts")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.Location", b =>
                {
                    b.HasOne("TaparApi.Data.Entities.LocationType", "LocationType")
                        .WithMany("Locations")
                        .HasForeignKey("locationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LocationType");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.OfficeUpdate", b =>
                {
                    b.HasOne("TaparApi.Data.Entities.BusinessOffice", "BusinessOffice")
                        .WithMany("OfficeUpdates")
                        .HasForeignKey("businessOfficeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BusinessOffice");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.SpecialTypeField", b =>
                {
                    b.HasOne("TaparApi.Data.Entities.BusinessType1", "BusinessType1")
                        .WithMany("SpecialTypeFields")
                        .HasForeignKey("businessType1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TaparApi.Data.Entities.BusinessType2", "BusinessType2")
                        .WithMany("SpecialTypeFields")
                        .HasForeignKey("businessType2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TaparApi.Data.Entities.FieldType", "FieldType")
                        .WithMany()
                        .HasForeignKey("fieldTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BusinessType1");

                    b.Navigation("BusinessType2");

                    b.Navigation("FieldType");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.ViewCount", b =>
                {
                    b.HasOne("TaparApi.Data.Entities.Business", "Business")
                        .WithMany("ViewCounts")
                        .HasForeignKey("businessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TaparApi.Data.Entities.User", "User")
                        .WithMany("ViewCounts")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.Business", b =>
                {
                    b.Navigation("BusinessUpdates");

                    b.Navigation("Comments");

                    b.Navigation("LikeCounts");

                    b.Navigation("ViewCounts");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.BusinessCategory", b =>
                {
                    b.Navigation("BusinessType1s");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.BusinessOffice", b =>
                {
                    b.Navigation("Businesses");

                    b.Navigation("OfficeUpdates");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.BusinessType1", b =>
                {
                    b.Navigation("BusinessType2s");

                    b.Navigation("SpecialTypeFields");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.BusinessType2", b =>
                {
                    b.Navigation("SpecialTypeFields");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.Location", b =>
                {
                    b.Navigation("BusinessOffices");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.LocationType", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("TaparApi.Data.Entities.User", b =>
                {
                    b.Navigation("BusinessOffices");

                    b.Navigation("BusinessPersons");

                    b.Navigation("Comments");

                    b.Navigation("LikeCounts");

                    b.Navigation("ViewCounts");
                });
#pragma warning restore 612, 618
        }
    }
}
